'use strict'

var gElCanvas
var gCtx
var gStartPos
var gColorFill = '#ffffff'
var gColorStroke = '#000000'
var elContainer
var gRects = []
var posTopRect
var posBottomRect
var posMiddleRect
var gIsDownload = false
var gCurrAddedLine

const gTouchEvs = ['touchstart', 'touchmove', 'touchend']


function initEditor() {
    gElCanvas = document.querySelector('canvas')
    gCtx = gElCanvas.getContext('2d')

    addListeners() //adds the mouse,touch,resize listeners
    resizeCanvas() //resizes the canvas on init
    renderCanvas() //render the canvas-empty!
}


//***************************RENDER************************************ */
function renderCanvas() {
    gCtx.save()
    drawImgOnCanvas(gMeme.src, gMeme.width, gMeme.height)
    if (!gIsDownload) {
        renderRectTop()
        renderRectBottom()
        if (gMeme.lines.length > 2) {
            for (var i = 2; i < gMeme.lines.length; i++) {
                gCurrAddedLine = i
                renderRectMiddle()
                renderTextMiddle()
            }
        }

    }
    renderTextTop()
    renderTextBottom()
    if (gMeme.lines.length > 2) {
        for (var i = 2; i < gMeme.lines.length; i++) {
            gCurrAddedLine = i
            renderTextMiddle()
        }
    }

    gCtx.restore()
}

function renderGallery() {
    var strHtml = ''
    strHtml += gImgs.map(function (img) {
        return `<img src="${img.url}" id="${img.id}" class="image-gallery" onclick="convertImage(this)">`
    }).join('')
    document.querySelector('.images-grid').innerHTML = strHtml;
}

// function renderEditor() {
//     var strHtml = ''
//     strHtml += ``
// }


//**************************TOUCH EVENTS***************************************** */
function addListeners() {
    addMouseListeners()
    addTouchListeners()
    window.addEventListener('resize', () => {
        resizeCanvas()
    })
}

function addMouseListeners() {
    gElCanvas.addEventListener('mousemove', onMove)
    gElCanvas.addEventListener('mousedown', onDown)
    gElCanvas.addEventListener('mouseup', onUp)
}

function addTouchListeners() {
    gElCanvas.addEventListener('touchmove', onMove)
    gElCanvas.addEventListener('touchstart', onDown)
    gElCanvas.addEventListener('touchend', onUp)
}


//***the resize caused me a lot of bugs, so I didnt used it, i did manually resize canvas in css by media queries */
function resizeCanvas() {
    // elContainer = document.querySelector('.canvas-container')
    // if(elContainer.offsetWidth )
    // gElCanvas.width = elContainer.offsetWidth
    // gElCanvas.height = elContainer.offsetHeight
}



function onDown(ev) {
    const pos = getEvPos(ev)
    if (!isRectClicked(pos)) {
        document.querySelector('.input-text').classList.remove('focus');
        document.querySelector('.input-text').value = ''
        return
    }
    setRectisDrag(true)
    gStartPos = pos
    document.body.style.cursor = 'grabbing'
    document.querySelector('.input-text').classList.add('focus');

}

function onMove(ev) {
    if (gMeme.lines[gMeme.selectedLineIdx].isDrag) {
        const pos = getEvPos(ev)
        const dx = pos.x - gStartPos.x
        const dy = pos.y - gStartPos.y
        gMeme.lines[gMeme.selectedLineIdx].posX += dx
        gMeme.lines[gMeme.selectedLineIdx].posY += dy
        gStartPos = pos
        moveRect(dx, dy)
        renderCanvas()
    }
}

function onUp() {
    setRectisDrag(false)
    document.body.style.cursor = 'grab'
}

function getEvPos(ev) {
    var pos = {
        x: ev.offsetX,
        y: ev.offsetY
    }

    if (gTouchEvs.includes(ev.type)) {
        ev.preventDefault() //to avoid scrolling in touchscreen
        ev = ev.changedTouches[0]
        pos = {
            x: ev.pageX - ev.target.offsetLeft - ev.target.clientLeft,
            y: ev.pageY - ev.target.offsetTop - ev.target.clientTop
        }
    }
    return pos
}


//****************************EDITOR-BUTTONS************************************* */
function onChangeColorStroke(color) {
    if (color !== '#000000') gColorStroke = color
}

function onChangeColorFill(color) {
    if (color !== '#ffffff') gColorFill = color

}

function onSetFont(font) {
    setFont(font)
}

function onChangeAlign(value) {
    gMeme.lines[gMeme.selectedLineIdx].align = value
}

//***deleting lines caused bugs(the render tries to render something that doesnt exist so setting the deleted items offset was my solution to this bug) */
function onDeleteLine() {
    gMeme.lines[gMeme.selectedLineIdx].posX = 600
    gMeme.lines[gMeme.selectedLineIdx].posY = 600
}



//*******************************ADDING LINES******************************************* */
function onAddLine() {
    // var newLine = prompt('Enter the new line')
    document.querySelector('.input-text').classList.add('focus');
    var newText = document.querySelector('.input-text').value;
    console.log(newText);
    var elNewLine = {
        txt: newText,
        size: 50,
        align: 'center',
        font: 'impact',
        isMarked: true,
        posX: 100,
        posY: 180,
        isClicked: false,
        isDrag: false
    }
    gMeme.lines.push(elNewLine)
    gMeme.selectedLineIdx = gMeme.lines.length - 1
    onChangeLineText(newText)
}




//**************************RENDER-TEXT AND RECT********************************************* */
function renderTextTop() {
    var posTop = {
        x: gMeme.lines[0].posX + 150,
        y: gMeme.lines[0].posY + 40
    }
    drawText(posTop.x, posTop.y, 0)
}

function renderTextBottom() {
    var posBottom = {
        x: gMeme.lines[1].posX + 150,
        y: gMeme.lines[1].posY + 40
    }
    drawText(posBottom.x, posBottom.y, 1)
}

function renderTextMiddle() {
    var posMiddle = {
        x: gMeme.lines[gCurrAddedLine].posX + 150 + gMeme.lines.length,
        y: gMeme.lines[gCurrAddedLine].posY + 40 + gMeme.lines.length
    }
    drawText(posMiddle.x, posMiddle.y, gCurrAddedLine)
}

function drawText(x, y, idx) {
    var text = gMeme.lines[idx].txt
    gCtx.beginPath();
    gCtx.lineWidth = 3;
    gCtx.strokeStyle = gColorStroke;
    gCtx.fillStyle = gColorFill;
    gCtx.font = gMeme.lines[idx].size + 'px ' + gMeme.lines[idx].font;
    gCtx.textAlign = gMeme.lines[idx].align;
    gCtx.fillText(text, x, y);
    gCtx.strokeText(text, x, y);
}


function renderRectTop() {
    posTopRect = {
        x: gMeme.lines[0].posX,
        y: gMeme.lines[0].posY
    }
    drawRect(posTopRect.x, posTopRect.y, 0)
}

function renderRectMiddle() {
    posMiddleRect = {
        x: gMeme.lines[gCurrAddedLine].posX + gMeme.lines.length,
        y: gMeme.lines[gCurrAddedLine].posY + gMeme.lines.length
    }
    drawRect(posMiddleRect.x, posMiddleRect.y, gCurrAddedLine)
}


function renderRectBottom() {
    posBottomRect = {
        x: gMeme.lines[1].posX,
        y: gMeme.lines[1].posY
    }
    drawRect(posBottomRect.x, posBottomRect.y, 1)
}

function drawRect(x, y, idx) {
    gCtx.beginPath();
    gCtx.lineWidth = 2;
    // gCtx.rect(x, y - 10, x + 200 + gMeme.lines[idx].txt.length, 60);
    gCtx.rect(x, y - 10, 300, 60);
    gCtx.fillStyle = "rgba(255, 255, 255, 0.4)";
    gCtx.fillRect(x, y - 10, 300, 60);
    gCtx.strokeStyle = (gMeme.lines[idx].isMarked) ? 'red' : 'black';
    gCtx.stroke();
}



//*************************MORE FUNCTIONS CANVAS RELATED******************************************** */
function onChangeLineIdx() {
    document.querySelector('.input-text').value = ''

    gMeme.selectedLineIdx++
    if (gMeme.selectedLineIdx > gMeme.lines.length - 1) gMeme.selectedLineIdx = 0
    // console.log(gMeme.selectedLineIdx);
    MarkCurrRect(gMeme.selectedLineIdx)
}

function onChangeLineText(newText) {
    var idx = gMeme.selectedLineIdx
    gMeme.lines[idx].txt = newText
    drawImgOnCanvas(gMeme.src, gMeme.width, gMeme.height)

}

function MarkCurrRect(lineIdx) {
    for (var i = 0; i < gMeme.lines.length; i++) {
        gMeme.lines[i].isMarked = (lineIdx === i)
    }
    renderCanvas()
}



function isRectClicked(clickedPos) {
    for (var i = 0; i < gMeme.lines.length; i++) {
        var posX = gMeme.lines[i].posX
        var posY = gMeme.lines[i].posY

        if (gElCanvas.offsetWidth >= 500) {
            if (clickedPos.x >= posX && clickedPos.x <= posX + 300 && clickedPos.y >= posY && clickedPos.y <= posY + 50) {
                gMeme.selectedLineIdx = i
                gMeme.lines[i].isClicked = true
                gMeme.lines[i].isMarked = true
                return true
            } else {
                gMeme.lines[i].isClicked = false
                gMeme.lines[i].isMarked = false
            }
        } else {
            if (clickedPos.x >= posX * 0.6 && clickedPos.x <= posX * 0.6 + 300 * 0.6 && clickedPos.y >= posY * 0.6 && clickedPos.y <= posY * 0.6 + 50 * 0.6) {
                gMeme.selectedLineIdx = i
                gMeme.lines[i].isClicked = true
                gMeme.lines[i].isMarked = true
                return true
            } else {
                gMeme.lines[i].isClicked = false
                gMeme.lines[i].isMarked = false
            }
        }

    }
    renderCanvas()
}



//*********************************DRAW IMAGE ON CANVAS*******************************
function drawImgOnCanvas(src, width, height) {
    // document.querySelector('.meme-editor-container').hidden = true
    document.querySelector('.meme-editor-container').hidden = false

    var img = new Image()
    img.src = src
    var heightCanvas = (height * gElCanvas.width) / width
    img.onload = () => {

        gCtx.drawImage(img, 0, 0, gElCanvas.width, heightCanvas) //img,x,y,xend,yend
        renderCanvas()
        document.querySelector('.image-gallery-container').hidden = true

    }
    // document.querySelector('.image-gallery-container').hidden = true
    // document.querySelector('.save-ig-container').hidden = true
    // document.querySelector('.save-ig-container').hidden = true

    // document.querySelector('.meme-editor-container').style.display = 'flex'

    // document.querySelector('.image-gallery-container').style.display = 'none'

}

function convertImage(image) {

    gCtx.clearRect(0, 0, gElCanvas.width, gElCanvas.height)
    var src = image.src
    var width = image.offsetWidth
    var height = image.offsetHeight
    gMeme.selectedImgId = image.id
    gMeme.src = src
    gMeme.width = width
    gMeme.height = height
    drawImgOnCanvas(src, width, height)
}



//*****************************Arrows-buttons********************************************** */
function onChangeFontSize(value) {
    gMeme.lines[gMeme.selectedLineIdx].size += value
}

function onChangePosition(value, valueX = 0) {
    gMeme.lines[gMeme.selectedLineIdx].posY += value
    gMeme.lines[gMeme.selectedLineIdx].posX += valueX
    renderCanvas()

}


//******************************IMAGE DOWNLOAD******************************
function saveCanvasWithoutRects(elLink) {
    gIsDownload = true
    renderCanvas()
    return elLink
    // drawImgOnCanvas(gMeme.src, gMeme.width, gMeme.height)
    // console.log('save here');
    // setTimeout(function () {
    //     gCtx.clearRect(0, 0, gElCanvas.offsetWidth, gElCanvas.offsetHeight)
    //     renderTextTop()
    //     renderTextBottom()
    //     if (gMeme.lines.length > 2) {
    //         renderTextMiddle()
    //     }
    // }, 0)

}


function downloadCanvas(elLink) {
    alert('********  למתרגל/ת שלום ********* You have 10 seconds to download the photo in the correct way, async problem I couldnt figure out how to solve it, doesnt work with setTimeOut, PRESS DOWNLOAD AGAIN')
    var link1 = saveCanvasWithoutRects(elLink)
    var gCanvas = document.querySelector('canvas');
    const data = gCanvas.toDataURL()
    link1.href = data
    link1.download = 'my-img.jpg'
    setTimeout(function () {
        gIsDownload = false
    }, 10000)


}


//*************************UPLOAD***************************************** */
//IMAGE UPLOADING to img tag from file system: 
function onImgInput(ev) {
    loadImageFromInput(ev, renderImg)
}

function loadImageFromInput(ev, onImageReady) {
    document.querySelector('.share-container').innerHTML = ''
    var reader = new FileReader()
    reader.onload = function (event) {
        var img = new Image()
        img.onload = onImageReady.bind(null, img)
        img.src = event.target.result //event.target.result=the url
    }
    reader.readAsDataURL(ev.target.files[0]) //translate the url
}

function renderImg(img) {
    gCtx.drawImage(img, 0, 0, gElCanvas.width, gElCanvas.height);
}

var gImgsStorage

function onSaveMeme() {
    var gCanvas = document.querySelector('canvas');
    var photo = 'img' + gMeme.selectedImgId
    localStorage.setItem(photo, gCanvas.toDataURL());
    loadFromStorageImg()
    gImgsStorage.push(photo)
    saveToStorage('gImgsStorage', gImgsStorage)
    onLoadImgFromStorage()
}

function loadFromStorageImg() {
    if (!localStorage.getItem('gImgsStorage')) {
        gImgsStorage = []
        saveToStorage('gImgsStorage', gImgsStorage)
    }
    gImgsStorage = loadFromStorage('gImgsStorage')
}

function onLoadImgFromStorage() {
    for (var i = 0; i < gImgsStorage.length; i++) {
        var dataURL = localStorage.getItem(gImgsStorage[i]);
        console.log(dataURL);
        var img = new Image;
        img.src = dataURL;

        document.querySelector('.saved-images').innerHTML += `<img src="${dataURL}" class="save-img">`;
    }

}

function onOpemMemesTab() {
    document.querySelector('.save-img-container').hidden = false
    document.querySelector('.meme-editor-container').hidden = true
    document.querySelector('.image-gallery-container').hidden = true
    // console.log(document.querySelector('.saved-images'));
}

function onOpenGallery() {
    // document.querySelector('.image-gallery-container').classList.remove('hidden');
    document.querySelector('.image-gallery-container').hidden = false
    document.querySelector('.save-img-container').hidden = true
    document.querySelector('.meme-editor-container').hidden = true
}

function shareOnFacebook() {
    uploadImg()
}


function uploadImg() { //shows the url link and button share
    const imgDataUrl = gElCanvas.toDataURL("image/jpeg"); //url translated
    // A function to be called if request succeeds: creates the link in douploadimage
    function onSuccess(uploadedImgUrl) {
        const encodedUploadedImgUrl = encodeURIComponent(uploadedImgUrl)

        document.querySelector('.share-facebook').innerHTML = `
        <a class="share" href="https://www.facebook.com/sharer/sharer.php?u=${encodedUploadedImgUrl}&t=${encodedUploadedImgUrl}" title="Share on Facebook" target="_blank" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u=${uploadedImgUrl}&t=${uploadedImgUrl}'); return false;">
        SHARE ON FACEBOOK
        </a>`
    }
    doUploadImg(imgDataUrl, onSuccess);
}

function doUploadImg(imgDataUrl, onSuccess) {
    const formData = new FormData();
    formData.append('img', imgDataUrl)
    fetch('//ca-upload.com/here/upload.php', {
            method: 'POST',
            body: formData
        })
        .then(res => res.text())
        .then((url) => {
            console.log('Got back live url:', url);
            onSuccess(url)
        })
        .catch((err) => {
            console.error(err)
        })

}






//DRAW IMAGE ON CANVAS FROM GMEME
// function drawImgOnCanvas2(gMeme) {
//     document.querySelector('.meme-editor-container').classList.remove('hidden');

//     var image = getImg(gMeme.selectedImgId)
//     var img = new Image()
//     img.src = image.url
//     var heightCanvas = (image.url.offsetHeight * gElCanvas.width) / image.url.offsetWidth
//     img.onload = () => {
//         gCtx.drawImage(img, 0, 0, gElCanvas.width, heightCanvas) //img,x,y,xend,yend
//     }
//     document.querySelector('.image-gallery-container').classList.add('hidden');

// }